{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carlo\\\\Documents\\\\BTI - UFRN\\\\6semestre\\\\IMD0522 - JOGOS DIGITAIS COMO FERRAMENTA PEDAG\\xD3GICA\\\\qat-test\\\\qat-test\\\\src\\\\components\\\\WordChecker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useGameContext } from \"./GameContext\";\nimport axios from \"axios\";\n\n// URL da API Datamuse para verificar palavras\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"https://api.datamuse.com/words\";\nexport function WordChecker() {\n  _s();\n  const {\n    currentLetters,\n    addUsedLetters\n  } = useGameContext();\n  const [message, setMessage] = useState(\"\"); // Estado para a mensagem de erro ou sucesso\n\n  // Função para verificar a palavra com a API Datamuse\n  const checkWordValidity = async word => {\n    try {\n      const response = await axios.get(API_URL, {\n        params: {\n          sp: word,\n          // sp indica a palavra que queremos procurar\n          max: 1 // Limita a resposta a 1 palavra\n        }\n      });\n\n      // Se a palavra existir, ela será retornada na lista\n      if (response.data.length > 0) {\n        addUsedLetters(currentLetters);\n        setMessage(`A palavra '${word}' é válida!`);\n      } else {\n        setMessage(\"Palavra inválida!\");\n      }\n    } catch (error) {\n      console.error(\"Erro ao verificar palavra:\", error);\n      setMessage(\"Erro ao verificar a palavra.\");\n    }\n  };\n\n  // Verifica a palavra sempre que currentLetters mudar\n  useEffect(() => {\n    const word = currentLetters.join(\"\"); // Junta as letras para formar a palavra\n    if (word.length === 3) {\n      // Apenas tenta validar quando 3 letras estão preenchidas\n      checkWordValidity(word); // Valida a palavra automaticamente\n    }\n  }, [currentLetters]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(WordChecker, \"zl15VovMIT3yMuaBoOKOycZSvPM=\", false, function () {\n  return [useGameContext];\n});\n_c = WordChecker;\nvar _c;\n$RefreshReg$(_c, \"WordChecker\");","map":{"version":3,"names":["React","useEffect","useState","useGameContext","axios","jsxDEV","_jsxDEV","API_URL","WordChecker","_s","currentLetters","addUsedLetters","message","setMessage","checkWordValidity","word","response","get","params","sp","max","data","length","error","console","join","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/carlo/Documents/BTI - UFRN/6semestre/IMD0522 - JOGOS DIGITAIS COMO FERRAMENTA PEDAGÓGICA/qat-test/qat-test/src/components/WordChecker.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useGameContext } from \"./GameContext\";\r\nimport axios from \"axios\";\r\n\r\n// URL da API Datamuse para verificar palavras\r\nconst API_URL = \"https://api.datamuse.com/words\";\r\n\r\nexport function WordChecker() {\r\n  const { currentLetters, addUsedLetters } = useGameContext();\r\n  const [message, setMessage] = useState(\"\"); // Estado para a mensagem de erro ou sucesso\r\n\r\n  // Função para verificar a palavra com a API Datamuse\r\n  const checkWordValidity = async (word) => {\r\n    try {\r\n      const response = await axios.get(API_URL, {\r\n        params: {\r\n          sp: word,  // sp indica a palavra que queremos procurar\r\n          max: 1     // Limita a resposta a 1 palavra\r\n        }\r\n      });\r\n\r\n      // Se a palavra existir, ela será retornada na lista\r\n      if (response.data.length > 0) {\r\n        addUsedLetters(currentLetters);\r\n        setMessage(`A palavra '${word}' é válida!`);\r\n      } else {\r\n        setMessage(\"Palavra inválida!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erro ao verificar palavra:\", error);\r\n      setMessage(\"Erro ao verificar a palavra.\");\r\n    }\r\n  };\r\n\r\n  // Verifica a palavra sempre que currentLetters mudar\r\n  useEffect(() => {\r\n    const word = currentLetters.join(\"\"); // Junta as letras para formar a palavra\r\n    if (word.length === 3) { // Apenas tenta validar quando 3 letras estão preenchidas\r\n      checkWordValidity(word); // Valida a palavra automaticamente\r\n    }\r\n  }, [currentLetters]);\r\n\r\n  return (\r\n    <div>\r\n      {/* Exibindo a mensagem abaixo do teclado */}\r\n      {message && <p className=\"message\">{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,eAAe;AAC9C,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAG,gCAAgC;AAEhD,OAAO,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM;IAAEC,cAAc;IAAEC;EAAe,CAAC,GAAGR,cAAc,CAAC,CAAC;EAC3D,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5C;EACA,MAAMY,iBAAiB,GAAG,MAAOC,IAAI,IAAK;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACV,OAAO,EAAE;QACxCW,MAAM,EAAE;UACNC,EAAE,EAAEJ,IAAI;UAAG;UACXK,GAAG,EAAE,CAAC,CAAK;QACb;MACF,CAAC,CAAC;;MAEF;MACA,IAAIJ,QAAQ,CAACK,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QAC5BX,cAAc,CAACD,cAAc,CAAC;QAC9BG,UAAU,CAAC,cAAcE,IAAI,aAAa,CAAC;MAC7C,CAAC,MAAM;QACLF,UAAU,CAAC,mBAAmB,CAAC;MACjC;IACF,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDV,UAAU,CAAC,8BAA8B,CAAC;IAC5C;EACF,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACd,MAAMc,IAAI,GAAGL,cAAc,CAACe,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IACtC,IAAIV,IAAI,CAACO,MAAM,KAAK,CAAC,EAAE;MAAE;MACvBR,iBAAiB,CAACC,IAAI,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC,EAAE,CAACL,cAAc,CAAC,CAAC;EAEpB,oBACEJ,OAAA;IAAAoB,QAAA,EAEGd,OAAO,iBAAIN,OAAA;MAAGqB,SAAS,EAAC,SAAS;MAAAD,QAAA,EAAEd;IAAO;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV;AAACtB,EAAA,CAzCeD,WAAW;EAAA,QACkBL,cAAc;AAAA;AAAA6B,EAAA,GAD3CxB,WAAW;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}