{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carlo\\\\Documents\\\\BTI - UFRN\\\\6semestre\\\\IMD0522 - JOGOS DIGITAIS COMO FERRAMENTA PEDAG\\xD3GICA\\\\qat-test\\\\qat-test\\\\src\\\\components\\\\Keyboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useGameContext } from \"../context/GameContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Keyboard() {\n  _s();\n  const {\n    currentLetters,\n    updateLetters\n  } = useGameContext();\n\n  // Manipula cliques no teclado virtual\n  const handleKeyPress = (letter, index) => {\n    updateLetters(letter.toUpperCase(), index);\n  };\n\n  // Adiciona suporte ao teclado físico\n  useEffect(() => {\n    const handlePhysicalKeyPress = e => {\n      const letter = e.key.toUpperCase();\n      const index = currentLetters.findIndex(l => l === \"\"); // Localiza o primeiro campo vazio, ou o último caso todos estejam preenchidos\n      if (/^[A-Z]$/.test(letter) && index !== -1) {\n        updateLetters(letter, index);\n      }\n    };\n    document.addEventListener(\"keydown\", handlePhysicalKeyPress);\n    return () => {\n      document.removeEventListener(\"keydown\", handlePhysicalKeyPress);\n    };\n  }, [currentLetters, updateLetters]);\n\n  // Renderiza o teclado virtual\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keyboard\",\n    children: alphabet.map((letter, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleKeyPress(letter, index),\n      className: \"keyboard-button\",\n      children: letter\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(Keyboard, \"sN/5Lz2P+vmkqaQ8gUIR4tchGIU=\", false, function () {\n  return [useGameContext];\n});\n_c = Keyboard;\nvar _c;\n$RefreshReg$(_c, \"Keyboard\");","map":{"version":3,"names":["React","useEffect","useGameContext","jsxDEV","_jsxDEV","Keyboard","_s","currentLetters","updateLetters","handleKeyPress","letter","index","toUpperCase","handlePhysicalKeyPress","e","key","findIndex","l","test","document","addEventListener","removeEventListener","alphabet","split","className","children","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/carlo/Documents/BTI - UFRN/6semestre/IMD0522 - JOGOS DIGITAIS COMO FERRAMENTA PEDAGÓGICA/qat-test/qat-test/src/components/Keyboard.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useGameContext } from \"../context/GameContext\";\r\n\r\nexport function Keyboard() {\r\n  const { currentLetters, updateLetters } = useGameContext();\r\n\r\n  // Manipula cliques no teclado virtual\r\n  const handleKeyPress = (letter, index) => {\r\n    updateLetters(letter.toUpperCase(), index);\r\n  };\r\n\r\n  // Adiciona suporte ao teclado físico\r\n  useEffect(() => {\r\n    const handlePhysicalKeyPress = (e) => {\r\n      const letter = e.key.toUpperCase();\r\n      const index = currentLetters.findIndex((l) => l === \"\"); // Localiza o primeiro campo vazio, ou o último caso todos estejam preenchidos\r\n      if (/^[A-Z]$/.test(letter) && index !== -1) {\r\n        updateLetters(letter, index);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handlePhysicalKeyPress);\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handlePhysicalKeyPress);\r\n    };\r\n  }, [currentLetters, updateLetters]);\r\n\r\n  // Renderiza o teclado virtual\r\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\r\n\r\n  return (\r\n    <div className=\"keyboard\">\r\n      {alphabet.map((letter, index) => (\r\n        <button\r\n          key={index}\r\n          onClick={() => handleKeyPress(letter, index)}\r\n          className=\"keyboard-button\"\r\n        >\r\n          {letter}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,cAAc,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,OAAO,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM;IAAEC,cAAc;IAAEC;EAAc,CAAC,GAAGN,cAAc,CAAC,CAAC;;EAE1D;EACA,MAAMO,cAAc,GAAGA,CAACC,MAAM,EAAEC,KAAK,KAAK;IACxCH,aAAa,CAACE,MAAM,CAACE,WAAW,CAAC,CAAC,EAAED,KAAK,CAAC;EAC5C,CAAC;;EAED;EACAV,SAAS,CAAC,MAAM;IACd,MAAMY,sBAAsB,GAAIC,CAAC,IAAK;MACpC,MAAMJ,MAAM,GAAGI,CAAC,CAACC,GAAG,CAACH,WAAW,CAAC,CAAC;MAClC,MAAMD,KAAK,GAAGJ,cAAc,CAACS,SAAS,CAAEC,CAAC,IAAKA,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;MACzD,IAAI,SAAS,CAACC,IAAI,CAACR,MAAM,CAAC,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;QAC1CH,aAAa,CAACE,MAAM,EAAEC,KAAK,CAAC;MAC9B;IACF,CAAC;IAEDQ,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEP,sBAAsB,CAAC;IAC5D,OAAO,MAAM;MACXM,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAER,sBAAsB,CAAC;IACjE,CAAC;EACH,CAAC,EAAE,CAACN,cAAc,EAAEC,aAAa,CAAC,CAAC;;EAEnC;EACA,MAAMc,QAAQ,GAAG,4BAA4B,CAACC,KAAK,CAAC,EAAE,CAAC;EAEvD,oBACEnB,OAAA;IAAKoB,SAAS,EAAC,UAAU;IAAAC,QAAA,EACtBH,QAAQ,CAACI,GAAG,CAAC,CAAChB,MAAM,EAAEC,KAAK,kBAC1BP,OAAA;MAEEuB,OAAO,EAAEA,CAAA,KAAMlB,cAAc,CAACC,MAAM,EAAEC,KAAK,CAAE;MAC7Ca,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAE1Bf;IAAM,GAJFC,KAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKJ,CACT;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACzB,EAAA,CAxCeD,QAAQ;EAAA,QACoBH,cAAc;AAAA;AAAA8B,EAAA,GAD1C3B,QAAQ;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}