{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useGameContext } from \"./GameContext\";\nimport axios from \"axios\";\n\n// URL da API Datamuse para verificar palavras\nconst API_URL = \"https://api.datamuse.com/words\";\nexport function WordChecker() {\n  _s();\n  const {\n    currentLetters,\n    addUsedLetters\n  } = useGameContext();\n\n  // Função para verificar a palavra com a API Datamuse\n  const checkWordValidity = async word => {\n    try {\n      const response = await axios.get(API_URL, {\n        params: {\n          sp: word,\n          // sp indica a palavra que queremos procurar\n          max: 1 // Limita a resposta a 1 palavra\n        }\n      });\n\n      // Se a palavra existir, ela será retornada na lista\n      if (response.data.length > 0) {\n        addUsedLetters(currentLetters);\n        alert(`A palavra '${word}' é válida!`);\n      } else {\n        alert(\"Palavra inválida!\");\n      }\n    } catch (error) {\n      console.error(\"Erro ao verificar palavra:\", error);\n    }\n  };\n\n  // Verifica a palavra sempre que currentLetters mudar\n  useEffect(() => {\n    const word = currentLetters.join(\"\"); // Junta as letras para formar a palavra\n    if (word.length === 3) {\n      // Verifica apenas quando as 3 letras forem preenchidas\n      checkWordValidity(word); // Verifica se a palavra é válida\n    }\n  }, [currentLetters, addUsedLetters]);\n  return null; // Não precisa de um botão agora, a verificação é automática\n}\n_s(WordChecker, \"LAZOafDDTKO0ySTxhdkXsy3NsPw=\", false, function () {\n  return [useGameContext];\n});\n_c = WordChecker;\nvar _c;\n$RefreshReg$(_c, \"WordChecker\");","map":{"version":3,"names":["React","useEffect","useGameContext","axios","API_URL","WordChecker","_s","currentLetters","addUsedLetters","checkWordValidity","word","response","get","params","sp","max","data","length","alert","error","console","join","_c","$RefreshReg$"],"sources":["C:/Users/carlo/Documents/BTI - UFRN/6semestre/IMD0522 - JOGOS DIGITAIS COMO FERRAMENTA PEDAGÓGICA/qat-test/qat-test/src/components/WordChecker.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useGameContext } from \"./GameContext\";\r\nimport axios from \"axios\";\r\n\r\n// URL da API Datamuse para verificar palavras\r\nconst API_URL = \"https://api.datamuse.com/words\";\r\n\r\nexport function WordChecker() {\r\n  const { currentLetters, addUsedLetters } = useGameContext();\r\n\r\n  // Função para verificar a palavra com a API Datamuse\r\n  const checkWordValidity = async (word) => {\r\n    try {\r\n      const response = await axios.get(API_URL, {\r\n        params: {\r\n          sp: word,  // sp indica a palavra que queremos procurar\r\n          max: 1     // Limita a resposta a 1 palavra\r\n        }\r\n      });\r\n\r\n      // Se a palavra existir, ela será retornada na lista\r\n      if (response.data.length > 0) {\r\n        addUsedLetters(currentLetters);\r\n        alert(`A palavra '${word}' é válida!`);\r\n      } else {\r\n        alert(\"Palavra inválida!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erro ao verificar palavra:\", error);\r\n    }\r\n  };\r\n\r\n  // Verifica a palavra sempre que currentLetters mudar\r\n  useEffect(() => {\r\n    const word = currentLetters.join(\"\"); // Junta as letras para formar a palavra\r\n    if (word.length === 3) { // Verifica apenas quando as 3 letras forem preenchidas\r\n      checkWordValidity(word); // Verifica se a palavra é válida\r\n    }\r\n  }, [currentLetters, addUsedLetters]);\r\n\r\n  return null; // Não precisa de um botão agora, a verificação é automática\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,cAAc,QAAQ,eAAe;AAC9C,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,gCAAgC;AAEhD,OAAO,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM;IAAEC,cAAc;IAAEC;EAAe,CAAC,GAAGN,cAAc,CAAC,CAAC;;EAE3D;EACA,MAAMO,iBAAiB,GAAG,MAAOC,IAAI,IAAK;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACR,OAAO,EAAE;QACxCS,MAAM,EAAE;UACNC,EAAE,EAAEJ,IAAI;UAAG;UACXK,GAAG,EAAE,CAAC,CAAK;QACb;MACF,CAAC,CAAC;;MAEF;MACA,IAAIJ,QAAQ,CAACK,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QAC5BT,cAAc,CAACD,cAAc,CAAC;QAC9BW,KAAK,CAAC,cAAcR,IAAI,aAAa,CAAC;MACxC,CAAC,MAAM;QACLQ,KAAK,CAAC,mBAAmB,CAAC;MAC5B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;;EAED;EACAlB,SAAS,CAAC,MAAM;IACd,MAAMS,IAAI,GAAGH,cAAc,CAACc,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IACtC,IAAIX,IAAI,CAACO,MAAM,KAAK,CAAC,EAAE;MAAE;MACvBR,iBAAiB,CAACC,IAAI,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC,EAAE,CAACH,cAAc,EAAEC,cAAc,CAAC,CAAC;EAEpC,OAAO,IAAI,CAAC,CAAC;AACf;AAACF,EAAA,CAlCeD,WAAW;EAAA,QACkBH,cAAc;AAAA;AAAAoB,EAAA,GAD3CjB,WAAW;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}